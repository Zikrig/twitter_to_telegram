from aiogram.types import InputMediaPhoto, InputMediaVideo, Message
from aiogram.utils.markdown import hlink
from aiogram import Bot
import re

from datetime import datetime, timedelta
from typing import List, Dict, Any

from services.Twitter import Twitter


async def send_twitter_post(bot: Bot, chat_id: int, post: dict):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å—Ç –∏–∑ Twitter –≤ Telegram —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –º–µ–¥–∏–∞-–≤–ª–æ–∂–µ–Ω–∏–π
    :param bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ aiogram
    :param chat_id: ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    :param post: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ—Å—Ç–∞ –∏–∑ Twitter API
    """
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞
    text = post.get('text', '')
    
    # –í—ã–¥–µ–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞
    links = re.findall(r'https?://\S+', text)
    clean_text = re.sub(r'https?://\S+', '', text).strip()
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏ –∫–∞–∫ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ
    formatted_links = "\n\nüîó " + "\nüîó ".join(links) if links else ""
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç
    formatted_text = f"{clean_text}{formatted_links}" if clean_text or links else ""

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞-–≤–ª–æ–∂–µ–Ω–∏–π
    media = post.get('media', [])
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –º–µ–¥–∏–∞ - –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
    if not media:
        if formatted_text:
            await bot.send_message(chat_id, formatted_text)
        return
    
    # –†–∞–∑–¥–µ–ª—è–µ–º —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ
    photos = [m for m in media if m['type'] == 'photo']
    videos = [m for m in media if m['type'] == 'video']
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –≤–∏–¥–µ–æ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –≤–∏–¥–µ–æ —Å —Ç–µ–∫—Å—Ç–æ–º
    if videos:
            try:
                video_url = videos[0]['url']
                await bot.send_video(
                    chat_id=chat_id,
                    video=video_url,
                    caption=formatted_text[:1024] if formatted_text else None
                )
            except Exception as e:
                # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Å—Å—ã–ª–∫—É
                await bot.send_message(
                    chat_id,
                    f"üé• –í–∏–¥–µ–æ: {video_url}\n\n{formatted_text}" if formatted_text else f"üé• –í–∏–¥–µ–æ: {video_url}"
                )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if photos:
        # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –±–æ–ª—å—à–µ 1 - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –∞–ª—å–±–æ–º
        if len(photos) > 1:
            media_group = []
            for i, photo in enumerate(photos):
                # –î–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ñ–æ—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                if i == 0 and formatted_text:
                    media_group.append(
                        InputMediaPhoto(
                            media=photo['url'],
                            caption=formatted_text[:1024]
                        )
                    )
                else:
                    media_group.append(
                        InputMediaPhoto(media=photo['url'])
                    )
            await bot.send_media_group(chat_id, media_group)
        
        # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Ñ–æ—Ç–æ
        else:
            await bot.send_photo(
                chat_id=chat_id,
                photo=photos[0]['url'],
                caption=formatted_text[:1024] if formatted_text else None
            )
            


async def get_new_posts(
    twitter_client: Twitter,
    channel_twitter_id: str,
    last_checked_time: datetime,
    bot: Bot,
    admin_ids: List[int]
) -> List[Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –¥–ª—è –∫–∞–Ω–∞–ª–∞ –Ω–∞—á–∏–Ω–∞—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
    :param twitter_client: –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞ Twitter
    :param channel_twitter_id: Twitter ID –∫–∞–Ω–∞–ª–∞
    :param last_checked_time: –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    :param bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    :param admin_ids: –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    :return: –°–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤
    """
    try:
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–ø–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–ª–∏ 24 —á–∞—Å–∞ –Ω–∞–∑–∞–¥)
        min_time = last_checked_time if last_checked_time else datetime.today() - timedelta(hours=72)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã —á–µ—Ä–µ–∑ API
        response = twitter_client.get_user_tweets(
            user=channel_twitter_id,
            count="20",  # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –ø–æ—Å—Ç–æ–≤
            min_created_at_datetime=min_time,
            exclude_retweets=True
        )
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ API
        if response['error'] == 'true':
            error_msg = response.get('data', 'Unknown error')
            for admin_id in admin_ids:
                await bot.send_message(
                    admin_id,
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_twitter_id}:\n{error_msg}"
                )
            return []
        
        return response['data'], f"–û—Å—Ç–∞–ª–æ—Å—å {response['rate_limit_remaining']}/{response['rate_limit_limit']} –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ API –¥–æ –∫–æ–Ω—Ü–∞ –º–µ—Å—è—Ü–∞."
    
    except Exception as e:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å API
        error_msg = f"Critical error for channel {channel_twitter_id}: {str(e)}"
        for admin_id in admin_ids:
            await bot.send_message(admin_id, error_msg)
        return []