# editor.py
from aiogram import Router, types, F
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.orm import Session
import re

from ..database import SessionLocal
from ..utils import *
from services.Twitter import Twitter
from config import config
from .utils import *

class EditorStates(StatesGroup):
    waiting_for_channel_name = State()
    
router = Router()

@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª")
async def start_add_channel(message: types.Message, state: FSMContext):
    telegram_id = str(message.from_user.id)

    with SessionLocal() as db:
        editor = get_editor_by_telegram_id(db, telegram_id)
        if not editor and not config.is_admin(message.from_user.id):
            return await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Ä–µ–¥–∞–∫—Ç–æ—Ä")

        await state.set_state(EditorStates.waiting_for_channel_name)
        await state.update_data(editor_id=editor.id if editor else None)
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ Twitter –∫–∞–Ω–∞–ª–∞ (–±–µ–∑ @):\n\n"
        "–ú–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ:",
        reply_markup=build_cancel_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
@router.callback_query(F.data == "cancel_action", EditorStates.waiting_for_channel_name)
async def cancel_add_channel(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await callback.answer()


@router.message(EditorStates.waiting_for_channel_name)
async def process_add_channel(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
    data = await state.get_data()
    editor_id = data.get("editor_id")
    channel_name = message.text.strip().replace("@", "")
    
    pattern = re.compile(r'^[a-zA-Z0-9_]{1,15}$')
    if not pattern.match(channel_name):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–∞—Ç–∏–Ω–∏—Ü—É –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=build_cancel_keyboard()
        )
        return
    
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏  

    with SessionLocal() as db:
        # –î–ª—è –∞–¥–º–∏–Ω–∞ —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if editor_id is None and config.is_admin(message.from_user.id):
            telegram_id = str(message.from_user.id)
            editor = get_editor_by_telegram_id(db, telegram_id)
            if not editor:
                editor = create_editor(db, telegram_id, "Admin")
            editor_id = editor.id
        
        editor = get_editor_by_id(db, editor_id)
        if not editor:
            await message.answer("‚ùå –†–µ–¥–∞–∫—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        twitter_client = Twitter(config.TWITTER_API_HOST, config.TWITTER_API_KEY)
        user_info = twitter_client.get_user_by_username(channel_name)

        if user_info['error'] == 'true':
            return await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {user_info.get('data', '–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω')}")
        
        rest_id = user_info['data']

        channel_data = {
            "name": channel_name,
            "twitter_id": rest_id,
            "last_post_time": None
        }

        channel = add_channel_to_editor(db, editor.id, channel_data)
        
        if channel:
            await message.answer(f"‚úÖ –ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω: @{channel_name} (Twitter ID: {rest_id})")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞")

    await state.clear()


@router.message(F.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã")
async def delete_channel_admin_list(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    telegram_id = str(message.from_user.id)
    
    with SessionLocal() as db:
        # –î–ª—è –∞–¥–º–∏–Ω–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã
        if config.is_admin(message.from_user.id):
            channels = get_all_channels(db)
        else:
            return
        
    if not channels:
        await message.answer("‚ùå –ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    builder = InlineKeyboardBuilder()
    for channel in channels:
        # –î–ª—è –∞–¥–º–∏–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–π callback —Ñ–æ—Ä–º–∞—Ç
        if config.is_admin(message.from_user.id):
            callback_data = f"admin_delete_channel:{channel.id}"
        # # else:
        # callback_data = f"delete_channel:{channel.id}:{editor.id if not config.is_admin(message.from_user.id) else ''}"
        
        builder.add(
            types.InlineKeyboardButton(
                text=f"‚ùå {channel.name} (ID: {channel.twitter_id})",
                callback_data=callback_data
            )
        )
    builder.adjust(1)
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=builder.as_markup()
    )


@router.message(F.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª")
async def delete_channel_list(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    telegram_id = str(message.from_user.id)
    
    with SessionLocal() as db:
        # –î–ª—è –∞–¥–º–∏–Ω–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã
        # if config.is_admin(message.from_user.id):
        #     channels = get_all_channels(db)
        # else:
        editor = get_editor_by_telegram_id(db, telegram_id)
        if not editor:
            return await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Ä–µ–¥–∞–∫—Ç–æ—Ä")
        channels = get_editor_channels(db, editor.id)
    
    if not channels:
        await message.answer("‚ùå –ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    builder = InlineKeyboardBuilder()
    for channel in channels:
        # –î–ª—è –∞–¥–º–∏–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–π callback —Ñ–æ—Ä–º–∞—Ç
        # if config.is_admin(message.from_user.id):
        #     callback_data = f"admin_delete_channel:{channel.id}"
        # else:
        callback_data = f"delete_channel:{channel.id}:{editor.id if not config.is_admin(message.from_user.id) else ''}"
        
        builder.add(
            types.InlineKeyboardButton(
                text=f"‚ùå {channel.name} (ID: {channel.twitter_id})",
                callback_data=callback_data
            )
        )
    builder.adjust(1)
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data.startswith("delete_channel:"))
async def delete_channel_callback(callback: types.CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ (–¥–ª—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤)"""
    _, channel_id, editor_id = callback.data.split(":")
    channel_id = int(channel_id)
    editor_id = int(editor_id)
    
    with SessionLocal() as db:
        if remove_channel_from_editor(db, editor_id, channel_id):
            await callback.message.edit_text("‚úÖ –ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω")
        else:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞")
    
    await callback.answer()

@router.callback_query(F.data.startswith("admin_delete_channel:"))
async def admin_delete_channel_callback(callback: types.CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    channel_id = int(callback.data.split(":")[1])
    
    with SessionLocal() as db:
        if delete_channel(db, channel_id):
            await callback.message.edit_text("‚úÖ –ö–∞–Ω–∞–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—ë–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã")
        else:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞")
    
    await callback.answer()

@router.message(F.text == "üìã –ú–æ–∏ –∫–∞–Ω–∞–ª—ã")
async def my_channels_handler(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    telegram_id = str(message.from_user.id)
    
    with SessionLocal() as db:
        if config.is_admin(message.from_user.id):
            editor = get_editor_by_telegram_id(db, telegram_id)
            if not editor:
                return await message.answer("‚ùå –ê–¥–º–∏–Ω –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ —Ä–µ–¥–∞–∫—Ç–æ—Ä")
            channels = get_editor_channels(db, editor.id)
        else:
            editor = get_editor_by_telegram_id(db, telegram_id)
            if not editor:
                return await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Ä–µ–¥–∞–∫—Ç–æ—Ä")
            channels = get_editor_channels(db, editor.id)
    
    if not channels:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤")
        return
    
    response = ["üìã –í–∞—à–∏ –∫–∞–Ω–∞–ª—ã:"]
    for channel in channels:
        last_post = channel.last_post_time or "–µ—â–µ –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª—Å—è"
        response.append(f"‚Ä¢ @{channel.name} (ID: {channel.twitter_id}) - –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç: {last_post}")
    
    await message.answer("\n".join(response))