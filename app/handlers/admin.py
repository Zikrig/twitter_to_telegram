# admin.py
from aiogram import Router, types, F, Bot
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from sqlalchemy.orm import Session, joinedload
from datetime import datetime, timedelta


from services.Twitter import Twitter
from .utils_postwork import send_twitter_post, get_new_posts
from ..database import SessionLocal
from ..utils import *
from config import config
from .utils import *

class AdminStates(StatesGroup):
    waiting_for_editor_data = State()
    
router = Router()

@router.message(F.text == "üìã –í—Å–µ –∫–∞–Ω–∞–ª—ã")
async def all_channels_list(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤"""
    if not config.is_admin(message.from_user.id):
        return
        
    with SessionLocal() as db:
        channels = get_all_channels(db)
    
    if not channels:
        await message.answer("‚ùå –ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    response = ["üìã –í—Å–µ –∫–∞–Ω–∞–ª—ã –≤ —Å–∏—Å—Ç–µ–º–µ:"]
    for channel in channels:
        editors = [editor.name for editor in channel.editors]
        editors_str = ", ".join(editors) if editors else "–Ω–µ—Ç —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞"
        
        response.append(
            f"‚Ä¢ @{channel.name} (ID: {channel.twitter_id})\n"
            f"  –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç: {channel.last_post_time or '–µ—â–µ –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª—Å—è'}\n"
            f"  –†–µ–¥–∞–∫—Ç–æ—Ä—ã: {editors_str}"
        )
    
    await message.answer("\n".join(response))

@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞")
async def add_editor_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã"""
    if not config.is_admin(message.from_user.id):
        return
        
    await state.set_state(AdminStates.waiting_for_editor_data)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ Telegram ID –∏ –∏–º—è –Ω–æ–≤–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>123456789 –ò–≤–∞–Ω</code>\n\n"
        "–ú–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ:",
        reply_markup=build_cancel_keyboard()
    )

@router.callback_query(F.data == "cancel_action", AdminStates.waiting_for_editor_data)
async def cancel_add_editor(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await callback.answer()
    
    
@router.message(F.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞")
async def delete_editor_list_handler(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    if not config.is_admin(message.from_user.id):
        return
        
    with SessionLocal() as db:
        editors = get_all_editors(db)
    
    if not editors:
        await message.answer("‚ùå –†–µ–¥–∞–∫—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    builder = InlineKeyboardBuilder()
    for editor in editors:
        builder.add(
            types.InlineKeyboardButton(
                text=f"‚ùå {editor.name} (ID: {editor.telegram_id})",
                callback_data=f"delete_editor:{editor.id}"
            )
        )
    builder.adjust(1)
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=builder.as_markup()
    )

@router.message(AdminStates.waiting_for_editor_data, F.text.regexp(r'^\d+\s+\w+'))
async def process_add_editor(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞"""
    if not config.is_admin(message.from_user.id):
        return
    await state.clear()
    
    parts = message.text.split(maxsplit=1)
    telegram_id = parts[0]
    name = parts[1]
    
    with SessionLocal() as db:
        editor = create_editor(db, telegram_id, name)
        if editor:
            await message.answer(f"‚úÖ –†–µ–¥–∞–∫—Ç–æ—Ä {name} (ID: {telegram_id}) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞")

@router.callback_query(F.data.startswith("delete_editor:"))
async def delete_editor_callback(callback: types.CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞"""
    editor_id = int(callback.data.split(":")[1])
    
    with SessionLocal() as db:
        editor = get_editor_by_id(db, editor_id)
        if editor and delete_editor(db, editor.telegram_id):
            await callback.message.edit_text(
                f"‚úÖ –†–µ–¥–∞–∫—Ç–æ—Ä {editor.name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω"
            )
        else:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞")
    
    await callback.answer()


@router.message(Command("update"))
async def update_and_send_posts(message: types.Message, bot: Bot):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
    if not config.is_admin(message.from_user.id):
        return
        
    with SessionLocal() as db:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã —Å –ø–æ–¥–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞–º–∏
        channels = db.query(models.Channel).options(joinedload(models.Channel.editors)).all()
        
        if not channels:
            await message.answer("‚ùå –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Twitter
        twitter_client = Twitter(config.TWITTER_API_HOST, config.TWITTER_API_KEY)
        
        rate_limit_reports = []
        total_new_posts = 0
        
        for channel in channels:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º last_post_time –≤ datetime
            last_checked = None
            if channel.last_post_time:
                try:
                    last_checked = datetime.strptime(channel.last_post_time, "%Y-%m-%d-%H-%M-%S")
                except ValueError:
                    last_checked = None
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã
            result = await get_new_posts(
                twitter_client=twitter_client,
                channel_twitter_id=channel.twitter_id,
                last_checked_time=last_checked,
                bot=bot,
                admin_ids=config.ADMINS
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if not result:
                continue
                
            new_posts, rate_limit_info = result
            rate_limit_reports.append(f"‚Ä¢ {channel.name}: {rate_limit_info}")
            
            if not new_posts:
                continue
                
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
            recipients = set()
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤ –∫–∞–Ω–∞–ª–∞
            for editor in channel.editors:
                recipients.add(int(editor.telegram_id))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤
            for admin_id in config.ADMINS:
                recipients.add(admin_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç—ã –∫–∞–∂–¥–æ–º—É –ø–æ–ª—É—á–∞—Ç–µ–ª—é
            for post in new_posts:
                for recipient_id in recipients:
                    await send_twitter_post(bot, recipient_id, post)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç–∞
            last_post_time = max(post['created_at'] for post in new_posts)
            channel.last_post_time = last_post_time
            total_new_posts += len(new_posts)
        
        # –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î
        db.commit()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –¥–ª—è –∞–¥–º–∏–Ω–∞
        report = (
            f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: {len(channels)}\n"
            f"‚Ä¢ –ù–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤: {total_new_posts}\n\n"
            f"–°—Ç–∞—Ç—É—Å API –ª–∏–º–∏—Ç–æ–≤:\n" + rate_limit_reports[-1]
        )
        
        await bot.send_message(message.from_user.id, report)
        
        
# @router.message(F.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã")
# async def admin_delete_channel_list(message: types.Message):
#     """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è"""
#     if not config.is_admin(message.from_user.id):
#         return
        
#     with SessionLocal() as db:
#         channels = get_all_channels(db)
    
#     if not channels:
#         await message.answer("‚ùå –ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
#         return
    
#     builder = InlineKeyboardBuilder()
#     for channel in channels:
#         builder.add(
#             types.InlineKeyboardButton(
#                 text=f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å @{channel.name}",
#                 callback_data=f"admin_full_delete:{channel.id}"
#             )
#         )
#     builder.adjust(1)
    
#     await message.answer(
#         "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã:",
#         reply_markup=builder.as_markup()
#     )


# @router.callback_query(F.data.startswith("admin_full_delete:"))
# async def admin_full_delete_callback(callback: types.CallbackQuery):
#     """–ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
#     channel_id = int(callback.data.split(":")[1])
    
#     with SessionLocal() as db:
#         channel = get_channel_by_id(db, channel_id)
#         if not channel:
#             await callback.message.edit_text("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
#             await callback.answer()
#             return
            
#         channel_name = channel.name
#         if delete_channel(db, channel_id):
#             await callback.message.edit_text(
#                 f"‚úÖ –ö–∞–Ω–∞–ª @{channel_name} –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—ë–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã"
#             )
#         else:
#             await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞")
    
#     await callback.answer()